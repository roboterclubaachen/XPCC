// coding: utf-8
/* Copyright (c) 2013, Roboterclub Aachen e.V.
 * All Rights Reserved.
 *
 * The file is part of the xpcc library and is released under the 3-clause BSD
 * license. See the file `LICENSE` for the full license governing this code.
 */
// ----------------------------------------------------------------------------
#ifndef XPCC_STM32_GPIO_HPP
#define XPCC_STM32_GPIO_HPP

#include "../../../device.hpp"
#include "../../../type_ids.hpp"
#include <xpcc/architecture/interface/gpio.hpp>
#include <xpcc/architecture/interface/i2c.hpp>
#include <xpcc/math/utils/bit_operation.hpp>

extern void xpcc_gpio_enable(void);

/**
 * @ingroup 	platform
 * @defgroup	{{target.string}}
 */

/**
 * @ingroup 	{{target.string}}
 * @defgroup	{{target.string}}_gpio GPIO
 */

namespace xpcc
{

namespace stm32
{

/// @ingroup {{target.string}}_gpio
struct Gpio
{
	enum class
	InputType
	{
		Floating = 0x4,	///< floating on input
		PullUp = 0x9,	///< pull-up on input
		PullDown = 0x8,	///< pull-down on input
	};

	enum class
	OutputType
	{
		PushPull = 0x0,		///< push-pull on output
		OpenDrain = 0x4,	///< open-drain on output
	};

	enum class
	OutputSpeed
	{
		MHz2  = 0x2,	///< Low speed
		MHz10 = 0x1,	///< Medium speed
		MHz50 = 0x3,	///< Fast speed
	};

	enum class
	InputTrigger
	{
		RisingEdge,
		FallingEdge,
		BothEdges,
	};

	/// The Port a Gpio Pin is connected to.
	enum class
	Port
	{
%% for port in gpios | getPorts
		{{ port.name | upper }} = {{ port.name | letterToNum }},
%% endfor
	};

	static void
	enable()
	{
		xpcc_gpio_enable();
	}

	static void
	disable()
	{
		// FIXME: Implement
	}

protected:
	/// @cond
	// Enum Class To Integer helper functions.
	static constexpr uint32_t
	i(InputType pull) { return uint32_t(pull); }
	static constexpr uint32_t
	i(OutputType out) { return uint32_t(out); }
	static constexpr uint32_t
	i(OutputSpeed speed) { return uint32_t(speed); }
	/// @endcond
};

// Gpio Classes created from the XML Device File Gpio Description
%% for gpio in gpios
	%% set port = gpio.port | upper
	%% set reg  = "GPIO" ~ port
	%% set pin  = gpio.id
	%% set cr = 'CRL' if pin|int < 8 else 'CRH'

	%% for type in ["Output", "Input", ""]
		%% set name = "Gpio" ~ type ~ port ~ gpio.id
		%% set superclass = "Gpio" ~ (type if type != "" else "IO")

/// {{type if type != "" else "IO"}} class for Pin {{port ~ pin}}
/// @ingroup	{{target.string}}_gpio
struct {{name}} : public Gpio, ::xpcc::{{superclass}}
{
public:
	/// Port name.
	static constexpr Port port = Port::{{port}};
	/// Pin Number.
	static constexpr uint8_t pin = {{pin}};
	/// Bitmask for registers that contain a 1bit value for every pin.
	static constexpr uint16_t mask  = 0x1 << pin;
private:
	static constexpr uint8_t cr_pin = {{ pin }} % 8;
	/// Bitmask for the configuration register with a 4bit mask.
	static constexpr uint32_t mask4 = 0xf << (cr_pin * 4);
	/// Port Number.
	static constexpr uint8_t port_nr = static_cast<uint8_t>(port);

%% if pin|int in range(0,5)
	static constexpr IRQn_Type ExternalInterruptIRQ = EXTI{{pin}}_IRQn;
%% elif pin|int in range(5,10)
	static constexpr IRQn_Type ExternalInterruptIRQ = EXTI9_5_IRQn;
%% elif pin|int in range(10,16)
	static constexpr IRQn_Type ExternalInterruptIRQ = EXTI15_10_IRQn;
%% endif

	/// Enable Analog Mode which is needed to use this pin as an ADC input.
	ALWAYS_INLINE static void
	setAnalogInput() {
		{{reg}}->{{cr}} &= ~mask4;
	}

public:
	ALWAYS_INLINE static void
	configure(OutputType type,
			  OutputSpeed speed = OutputSpeed::MHz50) {
		{{reg}}->{{cr}}  = ({{reg}}->{{cr}}  & ~mask4)  | ((i(type) | i(speed)) << (cr_pin * 4));
	}
	ALWAYS_INLINE static void configure(InputType type) {
		{{reg}}->{{cr}}  = ({{reg}}->{{cr}}  & ~mask4)  | ((i(type) & 0xc) << (cr_pin * 4));
		if (type == InputType::PullUp) {{reg}}->BSRR = mask;
		else {{reg}}->BRR = mask;
	}
		%% for af in gpio.afs
			%% if af.type == "analog"
	/// {{name}} connects to {{af.name}} of {{af.peripheral}}
	//static const ::xpcc::stm32::{{af.peripheral}}::Channel
	//{{af.peripheral}}Channel = ::xpcc::stm32::{{af.peripheral}}::Channel::{{ af.name }};
			%% endif
		%% endfor
		%% if type in ["" , "Output"]
	// GpioOutput
	// start documentation inherited
	ALWAYS_INLINE static void setOutput() {
		configure(OutputType::PushPull);
	}
	ALWAYS_INLINE static void setOutput(bool status) {
		set(status);
		setOutput();
	}
	ALWAYS_INLINE static void set() {
		{{reg}}->BSRR = mask;
	}
	ALWAYS_INLINE static void set(bool status) {
		if (status) {
			set();
		} else {
			reset();
		}
	}
	ALWAYS_INLINE static void reset() {
		{{reg}}->BRR = mask;
	}
	ALWAYS_INLINE static void toggle() {
		if (isSet()) {
			reset();
		} else {
			set();
		}
	}
	ALWAYS_INLINE static bool isSet() {
		return ({{reg}}->ODR & mask);
	}
	// stop documentation inherited
	ALWAYS_INLINE static void
	setOutput(OutputType type,
			  OutputSpeed speed = OutputSpeed::MHz50) {
		configure(type, speed);
		setOutput();
	}
		%% endif
		%% if type in ["", "Input"]
	// GpioInput
	// start documentation inherited
	ALWAYS_INLINE static void
	setInput() {
		configure(InputType::Floating);
	}
	ALWAYS_INLINE static bool read() {
		return ({{reg}}->IDR & mask);
	}
	// end documentation inherited
	ALWAYS_INLINE static void setInput(InputType type) {
		configure(type);
	}
	// External Interrupts
	ALWAYS_INLINE static void
	enableExternalInterrupt()
	{
		// PA[x], x =  0 ..  3 maps to EXTICR[0]
		// PA[x], x =  4 ..  7 maps to EXTICR[1]
		// PA[x], x =  8 .. 11 maps to EXTICR[2]
		// PA[x], x = 12 .. 15 maps to EXTICR[3]
		// => bit3 and bit2 (mask 0x0c) specify the register
		// => bit1 and bit0 (mask 0x03) specify the bit position
		constexpr uint8_t index = (pin & 0x0c) >> 2;
		constexpr uint8_t bit_pos = (pin & 0x03) << 2;
		constexpr uint16_t syscfg_mask = (0x0f) << bit_pos;
		constexpr uint16_t syscfg_value = (port_nr & (0x0f)) << bit_pos;
		// Enable AFIO
		RCC->APB2ENR |= RCC_APB2ENR_AFIOEN;
		AFIO->EXTICR[index] = (AFIO->EXTICR[index] & ~syscfg_mask) | syscfg_value;
		EXTI->IMR |= mask;
	}
	ALWAYS_INLINE static void
	disableExternalInterrupt()
	{
		EXTI->IMR &= ~mask;
	}
	ALWAYS_INLINE static void
	enableExternalInterruptVector(const uint32_t priority)
	{
		NVIC_SetPriority(ExternalInterruptIRQ, priority);
		NVIC_EnableIRQ(ExternalInterruptIRQ);
	}
	ALWAYS_INLINE static void
	disableExternalInterruptVector()
	{
		NVIC_DisableIRQ(ExternalInterruptIRQ);
	}
	inline static void
	setInputTrigger(const InputTrigger trigger)
	{
		switch (trigger)
		{
		case InputTrigger::RisingEdge:
			EXTI->RTSR |=  (mask);
			EXTI->FTSR &= ~(mask);
			break;
		case InputTrigger::FallingEdge:
			EXTI->RTSR &= ~(mask);
			EXTI->FTSR |=  (mask);
			break;
		case InputTrigger::BothEdges:
			EXTI->RTSR |=  (mask);
			EXTI->FTSR |=  (mask);
			break;
		}
	}
	ALWAYS_INLINE static bool
	getExternalInterruptFlag() {
		return (EXTI->PR & mask);
	}
	/**	\brief	Reset the interrupt flag in the interrupt routine. */
	ALWAYS_INLINE static void
	acknowledgeExternalInterruptFlag()
	{
		// Flags are cleared by writing a one to the flag position.
		EXTI->PR |= mask;
	}
		%% endif
	// GpioIO
	// start documentation inherited
	inline static Direction getDirection() {
		uint32_t mode = ({{reg}}->{{cr}} & mask4);
		if ((mode == 0) or (mode > (uint32_t(0b1001) << (cr_pin * 4))))
			return Direction::Special;
		if (mode > 0)
			return Direction::Out;
		return Direction::In;
	}
	// end documentation inherited
	ALWAYS_INLINE static void
	disconnect() {
		{{reg}}->{{cr}} = ({{reg}}->{{cr}}  & ~mask4)  | ((i(InputType::Floating)) << (cr_pin * 4));
		{{reg}}->BRR = mask;
	}
	// connect: Hardware Gpio
		%% for af in gpio.afs
			%% if af.id is not defined
				%% set enableAlternateFunction = ""
			%% else
				%% set af_all = ("" ~ af.id) | split(',')
				%% set afpos = af_all[0]
				%% set afmask = af_all[1]
				%% set afval = af_all[2]
				%% set enableAlternateFunction = "AFIO->MAPR = (AFIO->MAPR & ~(" ~ afmask ~ " << " ~ afpos ~ ")) | (" ~ afval ~ " << " ~ afpos ~ ");"
			%% endif

			%% set use = not (	(af.type == "in"     and type == "Output") or
								(af.type == "analog" and type == "Output") or
								(af.type == "out"    and type == "Input" ))
			%% if use
				%% if af.name not in ['Scl', 'Sda']
	/// Connect {{name}} as {{af.name}} to {{af.peripheral}}.
	ALWAYS_INLINE static void
	connect(TypeId::{{ af.peripheral }}{{ af.name }} /* t */) {
					%% if af.type == "analog"
		setAnalogInput();
					%% else
						%% if af.type == 'out'
		configure(OutputType(i(OutputType::PushPull) | 0x8), OutputSpeed::MHz50);
						%% else
		configure(InputType::Floating);
						%% endif
		{{ enableAlternateFunction }}
					%% endif
	}
				%% endif
				%% if af.type|string in ['', 'out'] and type != "Input" and af.name not in ['Scl', 'Sda']
	/// Connect {{name}} as {{af.name}} to {{af.peripheral}}.
	ALWAYS_INLINE static void
	connect(TypeId::{{ af.peripheral }}{{ af.name }} /* t */,
		OutputType type, OutputSpeed speed = OutputSpeed::MHz50) {
		configure(OutputType(i(type) | 0x8), speed);
		{{ enableAlternateFunction }}
	}
				%% endif
				%% if type == '' and af.name in ['Scl', 'Sda']
	/// Connect {{name}} as {{af.name}} to {{af.peripheral}}.
	inline static void
	connect(TypeId::{{ af.peripheral }}{{ af.name }} /* t */) {
					%% if af.name in ['Scl']
		I2c::resetDevices< {{name}} >();
					%% endif
		configure(OutputType(i(OutputType::OpenDrain) | 0x8));
		{{ enableAlternateFunction }}
	}
				%% endif
				%% if af.type|string in ['', 'in'] and type != "Output" and af.name not in ['Scl', 'Sda']
	/// Connect {{name}} as {{af.name}} to {{af.peripheral}}.
	ALWAYS_INLINE static void
	connect(TypeId::{{ af.peripheral }}{{ af.name }} /* t */, InputType type) {
		configure(type);
		{{ enableAlternateFunction }}
	}
				%% endif
			%% endif
		%% endfor
	// connect: Software Gpio
		%% if type in ['', 'Output']
			%% for peripheral in   ['SoftwareSpiMasterMosi',
									'SoftwareSpiMasterSck']
	/// Connect to `{{peripheral}}`.
	ALWAYS_INLINE static void
	connect(::xpcc::TypeId::{{ peripheral }}) {
		set();
		configure(OutputType::PushPull);
	}
			%% endfor
		%% endif
		%% if type in ['']
			%% for peripheral in   ['SoftwareI2cMasterSda',
									'SoftwareI2cMasterScl']
	/// Connect to `{{peripheral}}`.
	inline static void
	connect(::xpcc::TypeId::{{ peripheral }}) {
				%% if peripheral in ['SoftwareI2cMasterScl']
		I2c::resetDevices< {{name}} >();
				%% endif
		set();
		configure(OutputType::OpenDrain);
	}
			%% endfor
		%% endif
		%% if type in ['', 'Input']
			%% for peripheral in ['SoftwareSpiMasterMiso']
	/// Connect to `{{peripheral}}`.
	ALWAYS_INLINE static void
	connect(::xpcc::TypeId::{{ peripheral }}) {
		configure(InputType::Floating);
	}
			%% endfor
		%% endif
};

	%% endfor
%% endfor

%# Ports
/// @cond
template< Gpio::Port Port, uint8_t StartPin, uint8_t Width, GpioPort::DataOrder PortOrder>
class GpioPortBase;
/// @endcond

/**
 * Creates a hardware port with StartPin as LSB and with Width.
 *
 * @tparam	StartPin	a Gpio pin
 * @tparam	Width		required width of the port (up to 16)
 * @ingroup {{target.string}}_gpio
 */
template< typename StartPin, uint8_t Width, ::xpcc::GpioPort::DataOrder PortOrder = GpioPort::DataOrder::Normal >
class GpioPort : public ::xpcc::GpioPort, /** @cond */ public GpioPortBase< StartPin::port, StartPin::pin, Width, PortOrder > /** @endcond */
{
public:
	static constexpr uint8_t width = Width;

	static constexpr DataOrder
	getDataOrder()
	{ return PortOrder; }

	using PortType = uint16_t;

#ifdef __DOXYGEN__
	static void
	setOutput();

	static void
	setInput();

	static PortType
	read();

	static void
	write(PortType data);

	static void
	toggle();
#endif
};

/// @cond
%% for port in gpios | getPorts
template< uint8_t StartPin, uint8_t Width, ::xpcc::GpioPort::DataOrder PortOrder >
class GpioPortBase<Gpio::Port::{{port.name}}, StartPin, Width, PortOrder> : public Gpio
{
	static_assert(StartPin < {{port.startPin + port.width}},
			"StartPin too large, maximum {{port.startPin + port.width}}.");
	static_assert(Width <= {{port.width}},
			"Width too large, maximum {{port.width}}.");
	static_assert(Width > 0,
			"Width should be at least 1.");
	static_assert(StartPin + Width <= {{port.startPin + port.width}},
			"StartPin + Width too large, maximum {{port.startPin + port.width}}.");

	static constexpr uint8_t StartPinReversed = (8 - StartPin - Width) + 8;
	static constexpr uint16_t dataMask = (1 << Width) - 1;
	static constexpr uint16_t portMask = dataMask << StartPin;

	static constexpr uint64_t configMask = ((1ULL << (Width * 4)) - 1) << (StartPin * 4);
	static constexpr uint32_t configMaskL = static_cast<uint32_t>(configMask);
	static constexpr uint32_t configMaskH = static_cast<uint32_t>(configMask >> 32);

	static constexpr uint32_t port0001L = 0x11111111 & configMaskL;
	static constexpr uint32_t port0010L = 0x22222222 & configMaskL;
	static constexpr uint32_t port0100L = 0x44444444 & configMaskL;
	static constexpr uint32_t port1000L = 0x88888888 & configMaskL;

	static constexpr uint32_t port0001H = 0x11111111 & configMaskH;
	static constexpr uint32_t port0010H = 0x22222222 & configMaskH;
	static constexpr uint32_t port0100H = 0x44444444 & configMaskH;
	static constexpr uint32_t port1000H = 0x88888888 & configMaskH;

public:
	inline static void setOutput() {
		GPIO{{port.name}}->CRH = (GPIO{{port.name}}->CRH & ~configMaskH) | port0001H | port0010H;
		GPIO{{port.name}}->CRL = (GPIO{{port.name}}->CRL & ~configMaskL) | port0001L | port0010L;
	}
	inline static void setInput() {
		GPIO{{port.name}}->CRH = (GPIO{{port.name}}->CRH & ~configMaskH) | port0100H;
		GPIO{{port.name}}->CRL = (GPIO{{port.name}}->CRL & ~configMaskL) | port0100L;
	}
	inline static void
	configure(OutputType type,
			  OutputSpeed speed = OutputSpeed::MHz50)
	{
		uint32_t crh = 0;
		uint32_t crl = 0;

		if (type == OutputType::OpenDrain) {
			crh = port0100H;
			crl = port0100L;
		}
		if (i(speed) & 0b01) {
			crh |= port0001H;
			crl |= port0001L;
		}
		if (i(speed) & 0b10) {
			crh |= port0010H;
			crl |= port0010L;
		}
		GPIO{{port.name}}->CRH = (GPIO{{port.name}}->CRH & ~configMaskH) | crh;
		GPIO{{port.name}}->CRL = (GPIO{{port.name}}->CRL & ~configMaskL) | crl;
	}
	inline static void configure(InputType type)
	{
		if (type == InputType::Floating) {
			GPIO{{port.name}}->CRH = (GPIO{{port.name}}->CRH & ~configMaskH) | port0100H;
			GPIO{{port.name}}->CRL = (GPIO{{port.name}}->CRL & ~configMaskL) | port0100L;
		}
		else {
			GPIO{{port.name}}->CRH = (GPIO{{port.name}}->CRH & ~configMaskH) | port1000H;
			GPIO{{port.name}}->CRL = (GPIO{{port.name}}->CRL & ~configMaskL) | port1000L;
			if (type == InputType::PullUp)
				GPIO{{port.name}}->BSRR = portMask;
			else
				GPIO{{port.name}}->BRR = portMask;
		}
	}
	inline static uint16_t read() {
		if (PortOrder == ::xpcc::GpioPort::DataOrder::Normal) {   // this branch is optimized away
			uint16_t data = GPIO{{port.name}}->IDR & portMask;
			return (data >> StartPin);
		} else {
			uint16_t data = xpcc::bitReverse(uint16_t(GPIO{{port.name}}->IDR & portMask));
			return (data >> StartPinReversed);
		}
	}
	inline static void write(uint16_t data) {
		if (PortOrder == ::xpcc::GpioPort::DataOrder::Normal) {   // this branch is optimized away
			data <<= StartPin;
			GPIO{{port.name}}->ODR = (GPIO{{port.name}}->ODR & ~portMask) | (data & portMask);
		} else {
			data = xpcc::bitReverse(uint16_t(data << StartPinReversed));
			GPIO{{port.name}}->ODR = (GPIO{{port.name}}->ODR & ~portMask) | (data & portMask);
		}
	}
};

%% endfor
/// @endcond

} // namespace stm32

} // namespace xpcc

#endif // XPCC_STM32_GPIO_HPP
