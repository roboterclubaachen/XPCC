// coding: utf-8
// ----------------------------------------------------------------------------
/* Copyright (c) 2011, Roboterclub Aachen e.V.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Roboterclub Aachen e.V. nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY ROBOTERCLUB AACHEN E.V. ''AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL ROBOTERCLUB AACHEN E.V. BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
// ----------------------------------------------------------------------------

#include <stdint.h>

#include "../../../device.hpp"

%% if parameters.enable_hardfault_handler_led or parameters.enable_hardfault_handler_log
#include "../../clock/generic/common_clock.hpp"
%% endif

%% if parameters.enable_hardfault_handler_led
	%% if target is stm32f1
#include "../../gpio/stm32f1/gpio.hpp"
	%% else
#include "../../gpio/stm32/gpio.hpp"
	%% endif
%% endif

%% if parameters.enable_hardfault_handler_log
#include <xpcc/debug/logger.hpp>
	%% set id = parameters.hardfault_handler_uart

	%% if id in [1, 2, 3, 6]
		%%	set uart = "Usart"
	%% elif id in [4, 5, 7, 8]
		%%	set uart = "Uart"
	%% endif

#include "../../uart/stm32/uart_{{ id }}.hpp"

extern "C" void {{ uart | upper ~ id }}_IRQHandler(void);

// since the hard fault handler cannot be preempted by any other handler or IRQ
// we have to manually call it here. Not pretty, but it works.
extern "C"
void flushUart()
{
	while(not xpcc::stm32::{{ uart ~ id }}::isWriteFinished())
	{
		if (xpcc::stm32::{{ uart }}Hal{{ id }}::isTransmitRegisterEmpty())
		{
			{{ uart | upper ~ id }}_IRQHandler();
		}
	}
}
%% endif

// ----------------------------------------------------------------------------
extern "C"
void
_hardFaultHandler(const uint32_t * ctx)
{
%% if parameters.enable_hardfault_handler_log
#undef XPCC_LOG_LEVEL
#define XPCC_LOG_LEVEL	xpcc::log::ERROR

	uint32_t stacked_r0 = ((uint32_t) ctx[0]);
	uint32_t stacked_r1 = ((uint32_t) ctx[1]);
	uint32_t stacked_r2 = ((uint32_t) ctx[2]);
	uint32_t stacked_r3 = ((uint32_t) ctx[3]);

	uint32_t stacked_r12 = ((uint32_t) ctx[4]);
	uint32_t stacked_lr  = ((uint32_t) ctx[5]);
	uint32_t stacked_pc  = ((uint32_t) ctx[6]);
	uint32_t stacked_psr = ((uint32_t) ctx[7]);

	uint32_t bfar = (*((volatile uint32_t *)(0xE000ED38)));
	uint32_t cfsr = (*((volatile uint32_t *)(0xE000ED28)));
	uint32_t hfsr = (*((volatile uint32_t *)(0xE000ED2C)));
	uint32_t dfsr = (*((volatile uint32_t *)(0xE000ED30)));
	uint32_t afsr = (*((volatile uint32_t *)(0xE000ED3C)));

	xpcc::stm32::{{ uart ~ id }}::discardTransmitBuffer();
%% else
	(void) ctx;	// avoid warning
%% endif

	// Infinite loop
%% if parameters.enable_hardfault_handler_led
	uint32_t ledCounter = 1;
	xpcc::stm32::Gpio{{ parameters.hardfault_handler_led_port }}{{ parameters.hardfault_handler_led_pin }}::setOutput();
%% endif

%% if parameters.enable_hardfault_handler_log
	uint32_t logCounter = 1;
%% endif

	while(1)
	{
%% if parameters.enable_hardfault_handler_led
		if (--ledCounter == 0)
		{
			ledCounter = xpcc::clock::fcpu / 10;

			xpcc::stm32::Gpio{{ parameters.hardfault_handler_led_port }}{{ parameters.hardfault_handler_led_pin }}::toggle();
		}
%% endif

%% if parameters.enable_hardfault_handler_log
		if (--logCounter == 0)
		{
			logCounter = xpcc::clock::fcpu;

			XPCC_LOG_ERROR.printf("\n\nHard fault Exception:\n"); flushUart();
			XPCC_LOG_ERROR.printf("r0 : 0x%08lx   r12 : 0x%08lx\n", stacked_r0, stacked_r12); flushUart();
			XPCC_LOG_ERROR.printf("r1 : 0x%08lx   lr  : 0x%08lx\n", stacked_r1, stacked_lr); flushUart();
			XPCC_LOG_ERROR.printf("r2 : 0x%08lx   pc  : 0x%08lx\n", stacked_r2, stacked_pc); flushUart();
			XPCC_LOG_ERROR.printf("r3 : 0x%08lx   psr : 0x%08lx\n", stacked_r3, stacked_psr); flushUart();
			XPCC_LOG_ERROR.printf("BFAR  : 0x%08lx\n", bfar); flushUart();
			XPCC_LOG_ERROR.printf("CFSR  : 0x%08lx\n", cfsr); flushUart();
			XPCC_LOG_ERROR.printf("HFSR  : 0x%08lx\n", hfsr); flushUart();
			XPCC_LOG_ERROR.printf("DFSR  : 0x%08lx\n", dfsr); flushUart();
			XPCC_LOG_ERROR.printf("AFSR  : 0x%08lx\n", afsr); flushUart();
			XPCC_LOG_ERROR.printf("SHCSR : 0x%08lx\n", SCB->SHCSR); flushUart();
		}
%% endif
	}
}

