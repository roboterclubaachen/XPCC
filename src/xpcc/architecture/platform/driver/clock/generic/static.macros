%# coding: utf-8
%# ----------------------------------------------------------------------------
%#* Copyright (c) 2011, Roboterclub Aachen e.V.
%#* All rights reserved.
%#*
%#* Redistribution and use in source and binary forms, with or without
%#* modification, are permitted provided that the following conditions are met:
%#*
%#*     * Redistributions of source code must retain the above copyright
%#*       notice, this list of conditions and the following disclaimer.
%#*     * Redistributions in binary form must reproduce the above copyright
%#*       notice, this list of conditions and the following disclaimer in the
%#*       documentation and/or other materials provided with the distribution.
%#*     * Neither the name of the Roboterclub Aachen e.V. nor the
%#*       names of its contributors may be used to endorse or promote products
%#*       derived from this software without specific prior written permission.
%#*
%#* THIS SOFTWARE IS PROVIDED BY ROBOTERCLUB AACHEN E.V. ''AS IS'' AND ANY
%#* EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
%#* WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
%#. IN NO EVENT SHALL ROBOTERCLUB AACHEN E.V. BE LIABLE FOR ANY
%#* DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
%#* (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
%#* LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
%#* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
%#* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
%#* THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
%#

%% set op_lut = {"fixed": "==", "min": ">=", "max": "<="}
%% set op_msg_lut = {"fixed": " ", "min": " greater or ", "max": " less or "}

%% macro assertFrequency(parent, frequency, type, value)
	static_assert(({{ frequency }} {{ op_lut[type] }} {{ value }}),
		"The input frequency of {{ parent }} needs to be{{ op_msg_lut[type] }}equal to {{ value }}!");
%% endmacro

%% macro assertFrequencyForInput(parent, input, type, value, condition)
	static_assert(
		({{ input }}::Id != ClockName::{{ condition }}) or ({{ input }}::OutputFrequency {{ op_lut[type] }} {{ value }}),
		"The output frequency of {{ condition }} in {{ parent }} needs to be{{ op_msg_lut[type] }}equal to {{ value }}!");
%% endmacro


%% macro assertValidInput(name, input, valid_inputs)
	static_assert(
%% for valid_input in valid_inputs
		({{ input }}::Name == ClockName::{{ valid_input.name }}){{ "," if loop.last else " or" }}
%%	endfor
		"The clock source is not a valid selection for {{ name }}!");
%% endmacro
