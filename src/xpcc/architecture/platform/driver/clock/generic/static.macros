%#* Copyright (c) 2013, Roboterclub Aachen e. V.
%#* All Rights Reserved.
%#*
%#* The file is part of the xpcc library and is released under the 3-clause BSD
%#* license. See the file `LICENSE` for the full license governing this code.
%#* ---------------------------------------------------------------------------

%% set op_lut = {"fixed": "==", "min": ">=", "max": "<="}
%% set op_msg_lut = {"fixed": " ", "min": " greater or ", "max": " less or "}

%% macro assertFrequency(parent, frequency, type, value)
	static_assert(({{ frequency }} {{ op_lut[type] }} {{ value }}),
		"The input frequency of {{ parent }} needs to be{{ op_msg_lut[type] }}equal to {{ value }}!");
%% endmacro

%% macro assertOutputFrequency(parent, type, value)
	static_assert((OutputFrequency {{ op_lut[type] }} {{ value }}),
		"The output frequency of {{ parent }} needs to be{{ op_msg_lut[type] }}equal to {{ value }}!");
%% endmacro

%% macro assertFrequencyForInput(parent, input, type, value, condition)
	static_assert( ({{ input }}::Name != ClockName::{{ condition }}) or (InputFrequency {{ op_lut[type] }} {{ value }}),
		"The input frequency of {{ parent }} generated by {{ condition }} needs to be{{ op_msg_lut[type] }}equal to {{ value }}!");
%% endmacro


%% macro assertValidInput(name, input, valid_inputs)
	static_assert(
%% for valid_input in valid_inputs
		({{ input }}::Name == ClockName::{{ valid_input.name }}){{ "," if loop.last else " or" }}
%%	endfor
		"The clock source is not a valid selection for {{ name }}!");
%% endmacro
