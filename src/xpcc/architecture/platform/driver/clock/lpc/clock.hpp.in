// coding: utf-8
// ----------------------------------------------------------------------------
/* Copyright (c) 2013, Roboterclub Aachen e.V.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Roboterclub Aachen e.V. nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY ROBOTERCLUB AACHEN E.V. ''AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL ROBOTERCLUB AACHEN E.V. BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
// ----------------------------------------------------------------------------

#ifndef XPCC_LPC__CLOCK_HPP
#define XPCC_LPC__CLOCK_HPP

#include <stdint.h>
#include "../generic/common_clock.hpp"
#include "../../../device.hpp"
// #include "static.hpp"

using namespace xpcc::clock;

namespace xpcc
{
	namespace lpc
	{
		/**
		 * Clock management
		 *
		 * \ingroup
		 */
		class ClockControl
		{
		public:
			enum class
			PllSource
			{
				IRC = 0,
				SystemOscillator = 1,
				InternalClock = IRC,
				ExternalClock = SystemOscillator,
				ExternalCrystal = SystemOscillator,
			};

			enum class
			SystemClockSource : uint32_t
			{
				IRC = 0x0,
				SystemPllInput = 0x1,
				WatchdogOscillator = 0x2,
				SystemPllOutput = 0x3,
				InternalClock = IRC,
				ExternalClock = SystemPllInput, // FIXME: not quite hitting it
				ExternalCrystal = ExternalClock,
				Pll = SystemPllOutput,
			};

			enum class
			ClockOutputSource : uint32_t
			{
				IRC = 0x0,
				SystemOscillator = 0x1,
				WatchdogOscillator = 0x2,
				MainClock = 0x3,
				InternalClock = IRC,
				ExternalClock = SystemOscillator,
				ExternalCrystal = SystemOscillator,
				SystemClock = MainClock,
			};

		public:
			static bool
			enableInternalClock(uint32_t kHz, uint32_t waitCycles = 2048);

			static bool
			enableExternalClock(uint32_t kHz, uint32_t waitCycles = 2048);

			static bool
			enableExternalCrystal(uint32_t kHz, uint32_t waitCycles = 2048);

			/**
			 * Enable PLL.
			 *
			 * \param	source
			 * 		Source select for PLL
			 *
			 * \param	pllM
			 * 		???
			 *
			 * \param	pllP
			 * 		???
			 *
			 * Example:
			 *
			 */
			static bool
			enablePll(PllSource source, uint8_t pllM, uint8_t pllP);

			static bool
			enableSystemClock(SystemClockSource src, uint32_t waitCycles = 2048);

			static bool
			enableClockOutput(ClockOutputSource src, uint8_t div = 1, uint32_t waitCycles = 2048)
			{
				bool retval;
				LPC_SYSCON->CLKOUTCLKSEL = 0x3 & static_cast<uint32_t>(src);
				LPC_SYSCON->CLKOUTUEN = 0x01;	// toggle update enable register
				LPC_SYSCON->CLKOUTUEN = 0x00;
				LPC_SYSCON->CLKOUTUEN = 0x01;
				LPC_SYSCON->CLKOUTDIV = 0xff & static_cast<uint8_t>(div);

				while (not (retval = LPC_SYSCON->CLKOUTUEN & 0x01) and --waitCycles)
					;

				return retval;
			}

			static inline uint32_t
			setFlashLatency(const uint32_t CPU_Frequency, const uint16_t /*mV*/ = 3300)
			{
				if (CPU_Frequency <= MHz20) {
					LPC_FLASHCTRL->FLASHCFG = 0;
				}
				else if (CPU_Frequency <= MHz40) {
					LPC_FLASHCTRL->FLASHCFG = 1;
				}
				else {
					LPC_FLASHCTRL->FLASHCFG = 2;
				}
				return MHz50;
			}

			static inline uint32_t
			getCpuFrequency()
			{
				return xpcc::clock::fcpu;
			}

			static inline uint32_t
			getCpuFrequencykHz()
			{
				return xpcc::clock::fcpu_kHz;
			}

			static inline uint32_t
			getCpuFrequencyMHz()
			{
				return xpcc::clock::fcpu_MHz;
			}
		};
	}
}

#endif	//  XPCC_LPC__CLOCK_HPP
