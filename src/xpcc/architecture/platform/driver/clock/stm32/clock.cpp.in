// coding: utf-8
/* Copyright (c) 2011, Roboterclub Aachen e.V.
 * All Rights Reserved.
 *
 * The file is part of the xpcc library and is released under the 3-clause BSD
 * license. See the file `LICENSE` for the full license governing this code.
 */
// ----------------------------------------------------------------------------

#include "../../../device.hpp"
#include "clock.hpp"

// ----------------------------------------------------------------------------
bool
xpcc::stm32::ClockControl::enableSource(ClockSource src, uint32_t /*Hz*/, uint32_t waitCycles)
{
	switch (src)
	{
		case ClockSource::InternalClock:
		case ClockSource::LowSpeedInternalClock:
			// InternalClock is always on
			return true;

		case ClockSource::ExternalClock:
			RCC->CR |= RCC_CR_HSEBYP | RCC_CR_HSEON;
			// return if already running
			if( ((RCC->CR & (RCC_CR_HSEBYP | RCC_CR_HSEON)) == (RCC_CR_HSEBYP | RCC_CR_HSEON)) and (RCC->CR & RCC_CR_HSERDY) )
				return true;
			break;

		case ClockSource::ExternalCrystal:
			RCC->CR |= RCC_CR_HSEON;
			// return if already running
			if( RCC->CR & (RCC_CR_HSEON) and (RCC->CR & RCC_CR_HSERDY) )
				return true;
			break;

		default:
			return false;	// should not get here
	}

	bool retval;
	while (not (retval = (RCC->CR & RCC_CR_HSERDY)) and --waitCycles)
		;

	return retval;
}

%% if target is stm32f2 or target is stm32f4
// ----------------------------------------------------------------------------
void
xpcc::stm32::ClockControl::enablePll(PllSource source, uint8_t pllM,
	uint16_t pllN, uint8_t pllP, uint8_t pllQ)
{
	uint32_t tmp = 0;


	// Read reserved values and clear all other values
	tmp = RCC->PLLCFGR & ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM
			| RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLP | RCC_PLLCFGR_PLLQ);

	// PLLSRC source for pll and for plli2s
	tmp |= static_cast<uint32_t>(source);

	// PLLM (0) = factor is user defined VCO input frequency must be configured to 2MHz
	tmp |= ((uint32_t) pllM) & RCC_PLLCFGR_PLLM;

	// PLLN (6) = factor is user defined
	tmp |= (((uint32_t) pllN) << 6) & RCC_PLLCFGR_PLLN;

	// PLLP (16) divider for CPU frequency; (00: PLLP = 2, 01: PLLP = 4, etc.)
	tmp |= (((uint32_t) (pllP / 2) - 1) << 16) & RCC_PLLCFGR_PLLP;

	// PLLQ (24) divider for USB frequency; (0-15)
	tmp |= (((uint32_t) pllQ) << 24) & RCC_PLLCFGR_PLLQ;

	RCC->PLLCFGR = tmp;

	// enable pll
	RCC->CR |= RCC_CR_PLLON;
}
%% else
// ----------------------------------------------------------------------------
void
xpcc::stm32::ClockControl::enablePll(PllSource source,
%% if usbprescaler is defined
			UsbPrescaler usb,
%% endif
%% if pllprediv2 is defined
			uint8_t pllMul, uint8_t pllPrediv, uint8_t pllPrediv2)
%% elif pllprediv is defined
			uint8_t pllMul, uint8_t pllPrediv)
%% else
			uint8_t pllMul)
%% endif
{
%% set pullmul = 'RCC_CFGR_PLLMULL' if target is stm32f1 else 'RCC_CFGR_PLLMUL'
	// Read reserved values and clear all other values
%% if usbprescaler is defined
	uint32_t tmp = RCC->CFGR & ~(RCC_CFGR_USBPRE | {{pullmul}} | RCC_CFGR_PLLSRC);

	// Divide Output for USB Clock by 1.5?
	tmp |= static_cast<uint32_t>(usb);
%% else
	uint32_t tmp = RCC->CFGR & ~({{pullmul}} | RCC_CFGR_PLLSRC);
%% endif

	// PLLSRC source for pll
	tmp |= static_cast<uint32_t>(source);

	// Pll multiplication factor
	tmp |= (static_cast<uint32_t>(pllMul - 2) << 18) & {{pullmul}};

	RCC->CFGR = tmp;

%% if pllprediv is defined
	%% set mask = 'RCC_CFGR2_PREDIV1' if target is stm32f1 else 'RCC_CFGR2_PREDIV'
	// HSE PREDIV division factor
	RCC->CFGR2 = (RCC->CFGR2 & ~({{mask}})) | (uint32_t(pllPrediv - 1) & {{mask}});
%% endif
%% if pllprediv2 is defined
	RCC->CFGR2 = (RCC->CFGR2 & ~(RCC_CFGR2_PREDIV2)) | ((uint32_t(pllPrediv2 - 1) << 4) & RCC_CFGR2_PREDIV2);
%% endif
	// enable pll
	RCC->CR |= RCC_CR_PLLON;
}
%%endif

// ----------------------------------------------------------------------------
bool
xpcc::stm32::ClockControl::switchSystemClockTo(SystemClockSource src, uint32_t waitCycles)
{
	if (src == SystemClockSource::Pll)
	{
		uint32_t t = waitCycles;
		while (not (RCC->CR & RCC_CR_PLLRDY))
		{
			if (not t--)
				return false;
		}
	}

%% if target is stm32f4
	// APB2 84MHz, APB1 42MHz, AHB 168MHz, select PLL as source
%% elif target is stm32f2
	// APB2 60MHz, APB1 30MHz, AHB 120MHz, select PLL as source
%% endif

	uint32_t tmp = RCC->CFGR;
	tmp &= ~0x00003fff;
%% if target is stm32f2 or target is stm32f4
	tmp |= RCC_CFGR_PPRE1_DIV4;
	tmp |= RCC_CFGR_PPRE2_DIV2;
%% elif target is stm32f1 and target.name == '100'
	tmp |= RCC_CFGR_PPRE1_DIV1;	// APB1   = 24 / 1 = 24 MHz
	tmp |= RCC_CFGR_PPRE2_DIV1; // APB2   = 24 / 1 = 24 MHz
%% elif target is stm32f1 or target is stm32f3
	tmp |= RCC_CFGR_PPRE1_DIV2;	// APB1   = 72 / 2 = 36 MHz
	tmp |= RCC_CFGR_PPRE2_DIV1; // APB2   = 72 / 1 = 72 MHz
%% endif

	tmp |= RCC_CFGR_HPRE_DIV1; //
	tmp |= uint32_t(src);
	RCC->CFGR = tmp;

	// Wait till the main PLL is used as system clock source
	while ((RCC->CFGR & (uint32_t) RCC_CFGR_SWS) != (static_cast<uint32_t>(src) << 2))
	{
		if (not --waitCycles)
			return false;
	}

	return true;
}
