// coding: utf-8
/* Copyright (c) 2011-2016, Roboterclub Aachen e.V.
 * All Rights Reserved.
 *
 * The file is part of the xpcc library and is released under the 3-clause BSD
 * license. See the file `LICENSE` for the full license governing this code.
 */
// ----------------------------------------------------------------------------

#include "clock.hpp"

namespace xpcc
{
namespace clock
{

uint32_t ATTRIBUTE_FASTDATA fcpu({{ hsi_frequency|int * 1000000 }});
uint32_t ATTRIBUTE_FASTDATA fcpu_kHz({{ hsi_frequency|int * 1000 }});
uint16_t ATTRIBUTE_FASTDATA fcpu_MHz({{ hsi_frequency }});
%% if target is cortex_m0
	%% set loops = 4000.0
%% elif target is cortex_m7
	%% set loops = 1000.0
%% else
	%% set loops = 3000.0
%% endif
uint16_t ATTRIBUTE_FASTDATA ns_per_loop asm("ns_per_loop") ({{ loops / hsi_frequency|int}});

}
}

// ----------------------------------------------------------------------------
%% if target is stm32f0
bool
xpcc::stm32::ClockControl::enableInternalClockMHz14(uint32_t waitCycles)
{
	bool retval;
	RCC->CR2 |= RCC_CR2_HSI14ON;
	while (not (retval = (RCC->CR2 & RCC_CR2_HSI14RDY)) and --waitCycles)
		;
	return retval;
}
%% endif

%% if hsi48 is defined
bool
xpcc::stm32::ClockControl::enableInternalClockMHz48(uint32_t waitCycles)
{
	bool retval;
	RCC->CR2 |= RCC_CR2_HSI48ON;
	while (not (retval = (RCC->CR2 & RCC_CR2_HSI48RDY)) and --waitCycles)
		;
	return retval;
}
%% endif

bool
xpcc::stm32::ClockControl::enableInternalClock(uint32_t waitCycles)
{
	bool retval;
	RCC->CR |= RCC_CR_HSION;
	while (not (retval = (RCC->CR & RCC_CR_HSIRDY)) and --waitCycles)
		;
	return retval;
}

bool
xpcc::stm32::ClockControl::enableExternalClock(uint32_t waitCycles)
{
	bool retval;
	RCC->CR |= RCC_CR_HSEBYP | RCC_CR_HSEON;
	while (not (retval = (RCC->CR & RCC_CR_HSERDY)) and --waitCycles)
		;
	return retval;
}

bool
xpcc::stm32::ClockControl::enableExternalCrystal(uint32_t waitCycles)
{
	bool retval;
	RCC->CR = (RCC->CR & ~RCC_CR_HSEBYP) | RCC_CR_HSEON;
	while (not (retval = (RCC->CR & RCC_CR_HSERDY)) and --waitCycles)
		;
	return retval;
}

bool
xpcc::stm32::ClockControl::enableLowSpeedInternalClock(uint32_t waitCycles)
{
	bool retval;
	RCC->CSR |= RCC_CSR_LSION;
	while (not (retval = (RCC->CSR & RCC_CSR_LSIRDY)) and --waitCycles)
		;
	return retval;
}

bool
xpcc::stm32::ClockControl::enableLowSpeedExternalClock(uint32_t waitCycles)
{
	bool retval;
	RCC->BDCR |= RCC_BDCR_LSEBYP | RCC_BDCR_LSEON;
	while (not (retval = (RCC->BDCR & RCC_BDCR_LSERDY)) and --waitCycles)
		;
	return retval;
}

bool
xpcc::stm32::ClockControl::enableLowSpeedExternalCrystal(uint32_t waitCycles)
{
	bool retval;
	RCC->BDCR = (RCC->BDCR & ~RCC_BDCR_LSEBYP) | RCC_BDCR_LSEON;
	while (not (retval = (RCC->BDCR & RCC_BDCR_LSERDY)) and --waitCycles)
		;
	return retval;
}

%% if target is stm32f2 or target is stm32f4 or target is stm32f7
// ----------------------------------------------------------------------------
bool
xpcc::stm32::ClockControl::enablePll(PllSource source, uint8_t pllM,
	uint16_t pllN, uint8_t pllP, uint8_t pllQ, uint32_t waitCycles)
{
	uint32_t tmp = 0;


	// Read reserved values and clear all other values
	tmp = RCC->PLLCFGR & ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM
			| RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLP | RCC_PLLCFGR_PLLQ);

	// PLLSRC source for pll and for plli2s
	tmp |= static_cast<uint32_t>(source);

	// PLLM (0) = factor is user defined VCO input frequency must be configured to 2MHz
	tmp |= ((uint32_t) pllM) & RCC_PLLCFGR_PLLM;

	// PLLN (6) = factor is user defined
	tmp |= (((uint32_t) pllN) << 6) & RCC_PLLCFGR_PLLN;

	// PLLP (16) divider for CPU frequency; (00: PLLP = 2, 01: PLLP = 4, etc.)
	tmp |= (((uint32_t) (pllP / 2) - 1) << 16) & RCC_PLLCFGR_PLLP;

	// PLLQ (24) divider for USB frequency; (0-15)
	tmp |= (((uint32_t) pllQ) << 24) & RCC_PLLCFGR_PLLQ;

	RCC->PLLCFGR = tmp;

	// enable pll
	RCC->CR |= RCC_CR_PLLON;

	while (not (tmp = (RCC->CR & RCC_CR_PLLRDY)) and --waitCycles)
		;

	return tmp;
}
%% else
// ----------------------------------------------------------------------------
bool
xpcc::stm32::ClockControl::enablePll(PllSource source,
%% if usbprescaler is defined
			UsbPrescaler usb,
%% endif
%% if pllprediv2 is defined
			uint8_t pllMul, uint8_t pllPrediv, uint8_t pllPrediv2, uint32_t waitCycles)
%% elif pllprediv is defined
			uint8_t pllMul, uint8_t pllPrediv, uint32_t waitCycles)
%% else
			uint8_t pllMul, uint32_t waitCycles)
%% endif
{
%% set pullmul = 'RCC_CFGR_PLLMULL' if target is stm32f1 else 'RCC_CFGR_PLLMUL'
	// Read reserved values and clear all other values
%% if usbprescaler is defined
	uint32_t tmp = RCC->CFGR & ~(RCC_CFGR_USBPRE | {{pullmul}} | RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE);

	// Divide Output for USB Clock by 1.5?
	tmp |= static_cast<uint32_t>(usb);
%% else
	uint32_t tmp = RCC->CFGR & ~({{pullmul}} | RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE);
%% endif

	// PLLSRC source for pll
	tmp |= static_cast<uint32_t>(source);

	// Pll multiplication factor
	tmp |= (static_cast<uint32_t>(pllMul - 2) << 18) & {{pullmul}};

%% if pllprediv is defined
	%% set mask = 'RCC_CFGR2_PREDIV1' if target is stm32f1 else 'RCC_CFGR2_PREDIV'
#ifdef {{mask}}
	// HSE PREDIV division factor
	RCC->CFGR2 = (RCC->CFGR2 & ~({{mask}})) | (uint32_t(pllPrediv - 1) & {{mask}});
#else
	if (uint32_t(pllPrediv - 1) & 0x1) tmp |= RCC_CFGR_PLLXTPRE;
#endif
%% endif
	RCC->CFGR = tmp;
%% if pllprediv2 is defined
	RCC->CFGR2 = (RCC->CFGR2 & ~(RCC_CFGR2_PREDIV2)) | ((uint32_t(pllPrediv2 - 1) << 4) & RCC_CFGR2_PREDIV2);
%% endif
	// enable pll
	RCC->CR |= RCC_CR_PLLON;

	while (not (tmp = (RCC->CR & RCC_CR_PLLRDY)) and --waitCycles)
		;

	return tmp;
}
%%endif

// ----------------------------------------------------------------------------
bool
xpcc::stm32::ClockControl::enableSystemClock(SystemClockSource src, uint32_t waitCycles)
{
	RCC->CFGR = (RCC->CFGR & ~RCC_CFGR_SW) | uint32_t(src);

	// Wait till the main PLL is used as system clock source
	src = SystemClockSource(uint32_t(src) << 2);
	while ((RCC->CFGR & RCC_CFGR_SWS) != uint32_t(src))
	{
		if (not --waitCycles)
			return false;
	}

	return true;
}
