// coding: utf-8
/* Copyright (c) 2011, Roboterclub Aachen e.V.
 * All Rights Reserved.
 *
 * The file is part of the xpcc library and is released under the 3-clause BSD
 * license. See the file `LICENSE` for the full license governing this code.
 */
// ----------------------------------------------------------------------------

#ifndef XPCC_STM32_CLOCK_HPP
#define XPCC_STM32_CLOCK_HPP

#include <stdint.h>
#include "../../../device.hpp"
#include "../generic/common_clock.hpp"
// #include "static.hpp"

using namespace xpcc::clock;

namespace xpcc
{

namespace stm32
{

/**
 * Clock management.
 *
 * For using the internal clock (which is 16MHz) use:
 * \code
 * typedef xpcc::stm32::Clock C;
 * enablePll(C::PllSource::PLL_HSI, 8, 120);	// for STM32F2xx
 * enablePll(C::PllSource::PLL_HSI, 8, 168);	// for STM32F4xx
 * switchToPll();
 * \endcode
 *
 * For using an external crystal with 8 MHz use:
 * \code
 * typedef xpcc::stm32::Clock C;
 * if (enableHse(C::HseConfig::HSE_CRYSTAL))
 * {
 *     enablePll(C::PllSource::PLL_HSE, 4, 120);	// for STM32F2xx
 *     enablePll(C::PllSource::PLL_HSE, 4, 168);	// for STM32F4xx
 *     switchToPll();
 * }
 * \endcode
 *
 * For using an external oscillator with 25 MHz use:
 * \code
 * if (enableHse(HSE_BYPASS))
 * {
 *     enablePll(PLL_HSE, 25, 240);	// for STM32F2xx
 *     enablePll(PLL_HSE, 25, 336);	// for STM32F4xx
 *     switchToPll();
 * }
 * \endcode
 *
 * \ingroup	stm32f2_4
 */
class ClockControl
{
public:
	enum class
	ClockSource
	{
%% for source in sources
		{{ source.name }},
%% endfor
	};

	enum class
	PllSource : uint32_t
	{
%% if target is stm32f2 or target is stm32f4
		/// High speed internal clock (16 MHz)
		Hsi = RCC_PLLCFGR_PLLSRC_HSI,
		/// High speed external clock (see HseConfig)
		Hse = RCC_PLLCFGR_PLLSRC_HSE,
%% elif target is stm32f3
		/// High speed internal clock (16 MHz)
		Hsi = RCC_CFGR_PLLSRC_HSI_DIV2,
		/// High speed external clock (see HseConfig)
		Hse = RCC_CFGR_PLLSRC_HSE_PREDIV,
%% elif target is stm32f1
		/// High speed internal clock (8 MHz)
		Hsi = 0,
		/// High speed external clock (see HseConfig)
		Hse = RCC_CFGR_PLLSRC,
%% endif

		InternalClock = Hsi,
		ExternalClock = Hse,
		ExternalCrystal = Hse,
	};

	enum class
	SystemClockSource : uint32_t
	{
		Hsi = RCC_CFGR_SW_HSI,
		Hse = RCC_CFGR_SW_HSE,

		Pll = RCC_CFGR_SW_PLL,
		InternalClock = Hsi,
		ExternalClock = Hse,
		ExternalCrystal = Hse,
	};

	enum class
	RealTimeClockSource : uint32_t
	{
		Lsi = RCC_BDCR_RTCSEL_LSI,
		Lse = RCC_BDCR_RTCSEL_LSE,
		Hse = RCC_BDCR_RTCSEL_HSE,

		ExternalClock = Hse,
		ExternalCrystal = Hse,
		LowSpeedInternalClock = Lsi,
		LowSpeedExternalClock = Lse,
		LowSpeedExternalCrystal = Lse
	};

	enum class
	WatchdogClockSource : uint32_t
	{
		LowSpeedInternalClock = 0
	};
%% if target is stm32f2 or target is stm32f4
	enum class
	ClockOutput1Source : uint32_t
	{
		InternalClock = 0,
		ExternalClock = RCC_CFGR_MCO1_1,
		ExternalCrystal = RCC_CFGR_MCO1_1,
		Pll = RCC_CFGR_MCO1_1 | RCC_CFGR_MCO1_0,
	};

	enum class
	ClockOutput2Source : uint32_t
	{
		SystemClock = 0,
		ExternalClock = RCC_CFGR_MCO1_1,
		ExternalCrystal = RCC_CFGR_MCO1_1,
		Pll = RCC_CFGR_MCO1_1 | RCC_CFGR_MCO1_0,
	};
%% elif target is stm32f1 or target is stm32f3
	enum class
	ClockOutputSource : uint32_t
	{
		SystemClock   = RCC_CFGR_MCO_SYSCLK,
		InternalClock = RCC_CFGR_MCO_HSI,
		ExternalClock = RCC_CFGR_MCO_HSE,
		ExternalCrystal = RCC_CFGR_MCO_HSE,
	%% if target is stm32f1
		Pll = RCC_CFGR_MCO_PLLCLK_DIV2,	///< divided by 2
	%% else
		Pll = RCC_CFGR_MCO_PLL,	///< divided by 2
	%% endif
	};
%% endif
%% if usbprescaler is defined
	enum class
	UsbPrescaler : uint32_t
	{
		DivideBy1Point5 = 0,
		DoNotDivide     = RCC_CFGR_USBPRE,
	};
%% endif
public:
	// sources
	static bool
	enableInternalClock(uint32_t waitCycles = 1500);

	static bool
	enableExternalClock(uint32_t waitCycles = 1500);

	static bool
	enableExternalCrystal(uint32_t waitCycles = 1500);

	static bool
	enableLowSpeedInternalClock(uint32_t waitCycles = 1500);

	static bool
	enableLowSpeedExternalClock(uint32_t waitCycles = 1500);

	static bool
	enableLowSpeedExternalCrystal(uint32_t waitCycles = 1500);

	// plls
%% if target is stm32f2 or target is stm32f4
	/**
	 * Enable PLL.
	 *
	 * \code
	 * VCO input frequency = PLL input clock frequency / PLLM [with 2 ≤ PLLM ≤ 63]
	 * VCO output frequency = VCO input frequency × PLLN [with 64 ≤ PLLN ≤ 432]
	 * \endcode
	 *
	 * \param	source
	 * 		Source select for PLL and for plli2s. If you are using
	 * 		HSE you must enable it first (see enableHse()).
	 *
	 * \param	pllM
	 * 		Division factor for the main PLL (PLL) and
	 * 		audio PLL (PLLI2S) input clock (with 2 ≤ pllM ≤ 63).
	 *		The software has to set these bits correctly to ensure
	 *		that frequency of selected source divided by pllM
	 *		is in ranges from 1 to 2 MHz.
	 *
	 * \param	pllN
	 * 		Main PLL (PLL) multiplication factor for VCO (with 64 ≤ pllN ≤ 432).
	 * 		The software has to set these bits correctly to ensure
	 * 		that the VCO output frequency is
	 * 		 - 336 MHz for ST32F4. Core will run at 168 MHz.
	 *		 - 240 MHz for ST32F2. Core will run at 120 MHz.
	 *
	 * Example:
	 *
	 */
	static bool
	enablePll(PllSource source, uint8_t pllM,
					uint16_t pllN, uint8_t pllP, uint8_t pllQ, uint32_t waitCycles = 1500);
%% else
	static bool
	enablePll(PllSource source,
%% if usbprescaler is defined
				UsbPrescaler usb,
%% endif
	%% if pllprediv2 is defined
				uint8_t pllMul, uint8_t pllPrediv, uint8_t pllPrediv2, uint32_t waitCycles = 1500);
	%% elif pllprediv is defined
				uint8_t pllMul, uint8_t pllPrediv, uint32_t waitCycles = 1500);
	%% else
				uint8_t pllMul, uint32_t waitCycles = 1500);
	%% endif
%% endif

	// sinks
	static bool
	enableSystemClock(SystemClockSource src, uint32_t waitCycles = 1500);

	static inline bool
	enableRealTimeClock(RealTimeClockSource src);

	static inline bool
	enableWatchdogClock(WatchdogClockSource /*src*/)
	{ return true; }

%% if target is stm32f2 or target is stm32f4
	static inline bool
	enableClockOutput1(ClockOutput1Source src, uint8_t div)
	{
		uint32_t tmp = RCC->CFGR & ~(RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE);
		if (div > 1) tmp |= (div + 2) << 24;
		RCC->CFGR = tmp | static_cast<uint32_t>(src);
		return true;
	}

	static inline bool
	enableClockOutput2(ClockOutput2Source src)
	{
		uint32_t tmp = RCC->CFGR & ~(RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE);
		if (div > 1) tmp |= (div + 2) << 27;
		RCC->CFGR = tmp | static_cast<uint32_t>(src);
		return true;
	}
%% else
	static inline bool
	enableClockOutput(ClockOutputSource src)
	{
		RCC->CFGR = (RCC->CFGR & ~(RCC_CFGR_MCO))| static_cast<uint32_t>(src);
		return true;
	}
%% endif

	static inline uint32_t
	getCpuFrequency()
	{
		return xpcc::clock::fcpu;
	}

	static inline uint32_t
	getCpuFrequencykHz()
	{
		return xpcc::clock::fcpu_kHz;
	}

	static inline uint32_t
	getCpuFrequencyMHz()
	{
		return xpcc::clock::fcpu_MHz;
	}
};

}   // namespace stm32

}   // namespace xpcc

#endif	//  XPCC_STM32_CLOCK_HPP
