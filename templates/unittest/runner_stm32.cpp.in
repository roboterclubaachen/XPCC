// WARNING: This file is generated automatically, do not edit!
// Please modify the corresponding 'runner_stm32.cpp.in' file instead.
// ----------------------------------------------------------------------------

#include <xpcc/architecture/platform.hpp>

// This unittest is made for the STM32 F4 Discovery Board
#include "../../examples/stm32f4_discovery/stm32f4_discovery.hpp"

#include <unittest/reporter.hpp>
#include <unittest/controller.hpp>

${includes}

${names}

using namespace xpcc::stm32;

// Create an IODeviceWrapper around the Uart Peripheral we want to use
xpcc::IODeviceWrapper< Usart2, xpcc::IOBuffer::BlockIfFull > loggerDevice;

int
main()
{
	Board::initialize();

	// initialize output device, enable USART 2
	GpioOutputA2::connect(Usart2::Tx);
	GpioInputA3::connect(Usart2::Rx, Gpio::InputType::PullUp);
	Usart2::initialize<Board::systemClock, 115200>(12);

	loggerDevice.write("Unittests (" __DATE__ ", " __TIME__")\n");

	unittest::Reporter reporter(loggerDevice);
	unittest::Controller::instance().setReporter(reporter);

	// run tests
${tests}

	unittest::Controller::instance().getReporter().printSummary();

	while (true)
	{
	}
}
